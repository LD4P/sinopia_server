/*
 * Sinopia Server
 * Sinopia Server. Supports CRUD, following loosely LDP, on Sinopia resources. Top level requires special authorization for creating a group's graph (i.e. PCC, Stanford, etc.).
 *
 * OpenAPI spec version: 3.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SinopiaServer);
  }
}(this, function(expect, SinopiaServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SinopiaServer.LDPApi();
  });

  describe('(package)', function() {
    describe('LDPApi', function() {
      describe('createGroup', function() {
        it('should call createGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createGroup call
          /*
          var slug = "slug_example";
          var group = new SinopiaServer.LDPContainer();
          group.containerID = "";
          group.name = "";
          group.URI = "";
          group.resources = [new SinopiaServer.Resource()];
          group.resources[0].graph = [];
          group.resources[0].id = "";
          group.resources[0].context = new SinopiaServer.ResourceContext();
          group.resources[0].context.id = "";
          group.resources[0].context.type = "";
          group.resources[0].context.label = new SinopiaServer.Variable();
          group.resources[0].context.label.id = "";
          group.resources[0].context.label.type = "";
          var opts = {};
          opts.link = "<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"";
          opts.contentType = "contentType_example";

          instance.createGroup(slug, group, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createResource', function() {
        it('should call createResource successfully', function(done) {
          // TODO: uncomment, update parameter values for createResource call
          /*
          var groupID = "groupID_example";
          var resource = new SinopiaServer.Resource();
          resource.graph = [];
          resource.id = "";
          resource.context = new SinopiaServer.ResourceContext();
          resource.context.id = "";
          resource.context.type = "";
          resource.context.label = new SinopiaServer.Variable();
          resource.context.label.id = "";
          resource.context.label.type = "";
          var opts = {};
          opts.slug = "slug_example";
          opts.link = "link_example";
          opts.contentType = "contentType_example";

          instance.createResource(groupID, resource, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUser', function() {
        it('should call createUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createUser call
          /*
          var user = new SinopiaServer.Resource();
          user.graph = [];
          user.id = "";
          user.context = new SinopiaServer.ResourceContext();
          user.context.id = "";
          user.context.type = "";
          user.context.label = new SinopiaServer.Variable();
          user.context.label.id = "";
          user.context.label.type = "";
          var opts = {};
          opts.slug = "slug_example";
          opts.contentType = "contentType_example";

          instance.createUser(user, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteGroup', function() {
        it('should call deleteGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteGroup call
          /*
          var groupID = "groupID_example";

          instance.deleteGroup(groupID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteResource', function() {
        it('should call deleteResource successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteResource call
          /*
          var groupID = "groupID_example";
          var resourceID = "resourceID_example";

          instance.deleteResource(groupID, resourceID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUser', function() {
        it('should call deleteUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUser call
          /*
          var userID = "userID_example";

          instance.deleteUser(userID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBase', function() {
        it('should call getBase successfully', function(done) {
          // TODO: uncomment getBase call and complete the assertions
          /*

          instance.getBase().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SinopiaServer.SinopiaBasicContainer);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.context).to.be.a(SinopiaServer.SinopiaBasicContainerContext);
                  expect(data.context.rdfs).to.be.a('string');
              expect(data.context.rdfs).to.be("");
              expect(data.context.ldp).to.be.a('string');
              expect(data.context.ldp).to.be("");
            {
              let dataCtr = data.type;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.rdfslabel).to.be.a('string');
            expect(data.rdfslabel).to.be("");
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroup', function() {
        it('should call getGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroup call and complete the assertions
          /*
          var groupID = "groupID_example";

          instance.getGroup(groupID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SinopiaServer.SinopiaBasicContainer);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.context).to.be.a(SinopiaServer.SinopiaBasicContainerContext);
                  expect(data.context.rdfs).to.be.a('string');
              expect(data.context.rdfs).to.be("");
              expect(data.context.ldp).to.be.a('string');
              expect(data.context.ldp).to.be("");
            {
              let dataCtr = data.type;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.rdfslabel).to.be.a('string');
            expect(data.rdfslabel).to.be("");
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResource', function() {
        it('should call getResource successfully', function(done) {
          // TODO: uncomment, update parameter values for getResource call and complete the assertions
          /*
          var groupID = "groupID_example";
          var resourceID = "resourceID_example";
          var opts = {};
          opts.accept = "accept_example";

          instance.getResource(groupID, resourceID, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SinopiaServer.SinopiaResource);
            {
              let dataCtr = data.graph;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.context).to.be.a(SinopiaServer.ResourceContext);
                  expect(data.context.id).to.be.a('string');
              expect(data.context.id).to.be("");
              expect(data.context.type).to.be.a('string');
              expect(data.context.type).to.be("");
              expect(data.context.label).to.be.a(SinopiaServer.Variable);
                    expect(data.context.label.id).to.be.a('string');
                expect(data.context.label.id).to.be("");
                expect(data.context.label.type).to.be.a('string');
                expect(data.context.label.type).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUser', function() {
        it('should call getUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getUser call and complete the assertions
          /*
          var userID = "userID_example";

          instance.getUser(userID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SinopiaServer.Resource);
            {
              let dataCtr = data.graph;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.context).to.be.a(SinopiaServer.ResourceContext);
                  expect(data.context.id).to.be.a('string');
              expect(data.context.id).to.be("");
              expect(data.context.type).to.be.a('string');
              expect(data.context.type).to.be("");
              expect(data.context.label).to.be.a(SinopiaServer.Variable);
                    expect(data.context.label.id).to.be.a('string');
                expect(data.context.label.id).to.be("");
                expect(data.context.label.type).to.be.a('string');
                expect(data.context.label.type).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUsers', function() {
        it('should call getUsers successfully', function(done) {
          // TODO: uncomment getUsers call and complete the assertions
          /*

          instance.getUsers().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SinopiaServer.LDPContainer);
            expect(data.containerID).to.be.a('string');
            expect(data.containerID).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.URI).to.be.a('string');
            expect(data.URI).to.be("");
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SinopiaServer.Resource);
                {
                  let dataCtr = data.graph;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.context).to.be.a(SinopiaServer.ResourceContext);
                      expect(data.context.id).to.be.a('string');
                  expect(data.context.id).to.be("");
                  expect(data.context.type).to.be.a('string');
                  expect(data.context.type).to.be("");
                  expect(data.context.label).to.be.a(SinopiaServer.Variable);
                        expect(data.context.label.id).to.be.a('string');
                    expect(data.context.label.id).to.be("");
                    expect(data.context.label.type).to.be.a('string');
                    expect(data.context.label.type).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('headBase', function() {
        it('should call headBase successfully', function(done) {
          // TODO: uncomment headBase call
          /*

          instance.headBase().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('headGroup', function() {
        it('should call headGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for headGroup call
          /*
          var groupID = "groupID_example";

          instance.headGroup(groupID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('headResource', function() {
        it('should call headResource successfully', function(done) {
          // TODO: uncomment, update parameter values for headResource call
          /*
          var groupID = "groupID_example";
          var resourceID = "resourceID_example";

          instance.headResource(groupID, resourceID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('headUser', function() {
        it('should call headUser successfully', function(done) {
          // TODO: uncomment, update parameter values for headUser call
          /*
          var userID = "userID_example";

          instance.headUser(userID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('headUsers', function() {
        it('should call headUsers successfully', function(done) {
          // TODO: uncomment headUsers call
          /*

          instance.headUsers().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('optionsBase', function() {
        it('should call optionsBase successfully', function(done) {
          // TODO: uncomment optionsBase call
          /*

          instance.optionsBase().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('optionsGroup', function() {
        it('should call optionsGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for optionsGroup call
          /*
          var groupID = "groupID_example";

          instance.optionsGroup(groupID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('optionsResource', function() {
        it('should call optionsResource successfully', function(done) {
          // TODO: uncomment, update parameter values for optionsResource call
          /*
          var groupID = "groupID_example";
          var resourceID = "resourceID_example";

          instance.optionsResource(groupID, resourceID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('optionsUser', function() {
        it('should call optionsUser successfully', function(done) {
          // TODO: uncomment, update parameter values for optionsUser call
          /*
          var userID = "userID_example";

          instance.optionsUser(userID).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('optionsUsers', function() {
        it('should call optionsUsers successfully', function(done) {
          // TODO: uncomment optionsUsers call
          /*

          instance.optionsUsers().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBase', function() {
        it('should call updateBase successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBase call
          /*
          var base = new SinopiaServer.SinopiaBasicContainer();
          base.id = "";
          base.context = new SinopiaServer.SinopiaBasicContainerContext();
          base.context.rdfs = "";
          base.context.ldp = "";
          base.type = [""];
          base.rdfslabel = "";
          base.label = "";
          var opts = {};
          opts.link = "<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"";
          opts.contentType = "contentType_example";

          instance.updateBase(base, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateGroup', function() {
        it('should call updateGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for updateGroup call
          /*
          var groupID = "groupID_example";
          var group = new SinopiaServer.LDPContainer();
          group.containerID = "";
          group.name = "";
          group.URI = "";
          group.resources = [new SinopiaServer.Resource()];
          group.resources[0].graph = [];
          group.resources[0].id = "";
          group.resources[0].context = new SinopiaServer.ResourceContext();
          group.resources[0].context.id = "";
          group.resources[0].context.type = "";
          group.resources[0].context.label = new SinopiaServer.Variable();
          group.resources[0].context.label.id = "";
          group.resources[0].context.label.type = "";
          var opts = {};
          opts.contentType = "contentType_example";

          instance.updateGroup(groupID, group, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateResource', function() {
        it('should call updateResource successfully', function(done) {
          // TODO: uncomment, update parameter values for updateResource call
          /*
          var groupID = "groupID_example";
          var resourceID = "resourceID_example";
          var resource = new SinopiaServer.Resource();
          resource.graph = [];
          resource.id = "";
          resource.context = new SinopiaServer.ResourceContext();
          resource.context.id = "";
          resource.context.type = "";
          resource.context.label = new SinopiaServer.Variable();
          resource.context.label.id = "";
          resource.context.label.type = "";
          var opts = {};
          opts.contentType = "contentType_example";

          instance.updateResource(groupID, resourceID, resource, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUser', function() {
        it('should call updateUser successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUser call
          /*
          var userID = "userID_example";
          var user = new SinopiaServer.Resource();
          user.graph = [];
          user.id = "";
          user.context = new SinopiaServer.ResourceContext();
          user.context.id = "";
          user.context.type = "";
          user.context.label = new SinopiaServer.Variable();
          user.context.label.id = "";
          user.context.label.type = "";
          var opts = {};
          opts.contentType = "contentType_example";

          instance.updateUser(userID, user, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUsers', function() {
        it('should call updateUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUsers call
          /*
          var users = new SinopiaServer.LDPContainer();
          users.containerID = "";
          users.name = "";
          users.URI = "";
          users.resources = [new SinopiaServer.Resource()];
          users.resources[0].graph = [];
          users.resources[0].id = "";
          users.resources[0].context = new SinopiaServer.ResourceContext();
          users.resources[0].context.id = "";
          users.resources[0].context.type = "";
          users.resources[0].context.label = new SinopiaServer.Variable();
          users.resources[0].context.label.id = "";
          users.resources[0].context.label.type = "";
          var opts = {};
          opts.contentType = "contentType_example";

          instance.updateUsers(users, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
