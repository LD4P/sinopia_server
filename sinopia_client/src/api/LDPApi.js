/**
 * Sinopia Server
 * Sinopia Server. Supports CRUD, following loosely LDP, on Sinopia resources. Top level requires special authorization for creating a group's graph (i.e. PCC, Stanford, etc.).
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/LDPContainer', 'model/Resource', 'model/SinopiaBasicContainer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/LDPContainer'), require('../model/Resource'), require('../model/SinopiaBasicContainer'));
  } else {
    // Browser globals (root is window)
    if (!root.SinopiaServer) {
      root.SinopiaServer = {};
    }
    root.SinopiaServer.LDPApi = factory(root.SinopiaServer.ApiClient, root.SinopiaServer.ErrorResponse, root.SinopiaServer.LDPContainer, root.SinopiaServer.Resource, root.SinopiaServer.SinopiaBasicContainer);
  }
}(this, function(ApiClient, ErrorResponse, LDPContainer, Resource, SinopiaBasicContainer) {
  'use strict';

  /**
   * LDP service.
   * @module api/LDPApi
   * @version 2.0.0
   */

  /**
   * Constructs a new LDPApi.
   * @alias module:api/LDPApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create new Group within the base container.
     * Create a new Group (defined via JSON-LD in payload) within the base container.
     * @param {String} slug The suggested URI path for the group.
     * @param {module:model/LDPContainer} group Group metadata to insert into base container and describe the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.link specifies container type.  you probably shouldn&#39;t override this parameter for this operation. (default to &lt;http://www.w3.org/ns/ldp#BasicContainer&gt;; rel&#x3D;&quot;type&quot;)
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createGroupWithHttpInfo = function(slug, group, opts) {
      opts = opts || {};
      var postBody = group;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling createGroup");
      }

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling createGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Slug': slug,
        'Link': opts['link'] ? opts['link'] : '<http://www.w3.org/ns/ldp#BasicContainer>; rel="type"', //MODIFIED AUTOGEN: codegen JS disregarded default param value
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create new Group within the base container.
     * Create a new Group (defined via JSON-LD in payload) within the base container.
     * @param {String} slug The suggested URI path for the group.
     * @param {module:model/LDPContainer} group Group metadata to insert into base container and describe the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.link specifies container type.  you probably shouldn&#39;t override this parameter for this operation. (default to &lt;http://www.w3.org/ns/ldp#BasicContainer&gt;; rel&#x3D;&quot;type&quot;)
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createGroup = function(slug, group, opts) {
      return this.createGroupWithHttpInfo(slug, group, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a resource within a Group.
     * Create a new resource (defined via JSON-LD in payload) within a supplied Group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {module:model/Resource} resource Resource to insert into container
     * @param {Object} opts Optional parameters
     * @param {String} opts.slug The suggested URI path for the resource.
     * @param {String} opts.link specifies container type.
     * @param {String} opts.contentType Content-Type for the resource, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createResourceWithHttpInfo = function(groupID, resource, opts) {
      opts = opts || {};
      var postBody = resource;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling createResource");
      }

      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling createResource");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Slug': opts['slug'],
        'Link': opts['link'],
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = [];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a resource within a Group.
     * Create a new resource (defined via JSON-LD in payload) within a supplied Group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {module:model/Resource} resource Resource to insert into container
     * @param {Object} opts Optional parameters
     * @param {String} opts.slug The suggested URI path for the resource.
     * @param {String} opts.link specifies container type.
     * @param {String} opts.contentType Content-Type for the resource, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createResource = function(groupID, resource, opts) {
      return this.createResourceWithHttpInfo(groupID, resource, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a user within Sinopia.
     * Create a new user (defined via JSON-LD in payload) within Sinopia.
     * @param {module:model/Resource} user User to insert into Sinopia users&#39; container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.slug The suggested URI path for the user.
     * @param {String} opts.contentType Content-Type for the resource, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createUserWithHttpInfo = function(user, opts) {
      opts = opts || {};
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Slug': opts['slug'],
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a user within Sinopia.
     * Create a new user (defined via JSON-LD in payload) within Sinopia.
     * @param {module:model/Resource} user User to insert into Sinopia users&#39; container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.slug The suggested URI path for the user.
     * @param {String} opts.contentType Content-Type for the resource, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createUser = function(user, opts) {
      return this.createUserWithHttpInfo(user, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Group.
     * Deletes an existing Group container. This Group URI cannot be reused.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteGroupWithHttpInfo = function(groupID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling deleteGroup");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Group.
     * Deletes an existing Group container. This Group URI cannot be reused.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteGroup = function(groupID) {
      return this.deleteGroupWithHttpInfo(groupID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Resource.
     * Deletes an existing Resource. This Resource URI cannot be reused.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteResourceWithHttpInfo = function(groupID, resourceID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling deleteResource");
      }

      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling deleteResource");
      }


      var pathParams = {
        'groupID': groupID,
        'resourceID': resourceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}/{resourceID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Resource.
     * Deletes an existing Resource. This Resource URI cannot be reused.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteResource = function(groupID, resourceID) {
      return this.deleteResourceWithHttpInfo(groupID, resourceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a User.
     * Deletes an existing User. This User URI cannot be reused.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUserWithHttpInfo = function(userID) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteUser");
      }


      var pathParams = {
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users/{userID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a User.
     * Deletes an existing User. This User URI cannot be reused.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUser = function(userID) {
      return this.deleteUserWithHttpInfo(userID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata for the base container.
     * Get the RDF metadata (default serialization is JSON-LD) for the base container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SinopiaBasicContainer} and HTTP response
     */
    this.getBaseWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = SinopiaBasicContainer;

      return this.apiClient.callApi(
        '/repository', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata for the base container.
     * Get the RDF metadata (default serialization is JSON-LD) for the base container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SinopiaBasicContainer}
     */
    this.getBase = function() {
      return this.getBaseWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata (RDF) for a given Group.
     * Get the RDF (default serialization is JSON-LD) for a given Group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SinopiaBasicContainer} and HTTP response
     */
    this.getGroupWithHttpInfo = function(groupID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling getGroup");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = SinopiaBasicContainer;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata (RDF) for a given Group.
     * Get the RDF (default serialization is JSON-LD) for a given Group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SinopiaBasicContainer}
     */
    this.getGroup = function(groupID) {
      return this.getGroupWithHttpInfo(groupID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata (RDF) for a given resource.
     * Get the RDF (default serialization is JSON-LD) for a given resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Resource} and HTTP response
     */
    this.getResourceWithHttpInfo = function(groupID, resourceID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling getResource");
      }

      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling getResource");
      }


      var pathParams = {
        'groupID': groupID,
        'resourceID': resourceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = Resource;

      return this.apiClient.callApi(
        '/repository/{groupID}/{resourceID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata (RDF) for a given resource.
     * Get the RDF (default serialization is JSON-LD) for a given resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Resource}
     */
    this.getResource = function(groupID, resourceID) {
      return this.getResourceWithHttpInfo(groupID, resourceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * Get metadata for a given resource template.
     * Get serialization of JSON for a given NON-RDF resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Resource} and HTTP response
     */
    this.getNonRdfResourceWithHttpInfo = function(groupID, resourceID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling getResource");
      }

      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling getResource");
      }


      var pathParams = {
        'groupID': groupID,
        'resourceID': resourceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['RemoteUser'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Resource;

      return this.apiClient.callApi(
        '/repository/{groupID}/{resourceID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata (RDF) for a given user.
     * Get the RDF (default serialization is JSON-LD) for a given Sinopia user.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Resource} and HTTP response
     */
    this.getUserWithHttpInfo = function(userID) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling getUser");
      }


      var pathParams = {
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = Resource;

      return this.apiClient.callApi(
        '/repository/users/{userID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata (RDF) for a given user.
     * Get the RDF (default serialization is JSON-LD) for a given Sinopia user.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Resource}
     */
    this.getUser = function(userID) {
      return this.getUserWithHttpInfo(userID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metadata (RDF) for the Sinopia users container.
     * Get the RDF (default serialization is JSON-LD) for the Sinopia users&#39; container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LDPContainer} and HTTP response
     */
    this.getUsersWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = LDPContainer;

      return this.apiClient.callApi(
        '/repository/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get metadata (RDF) for the Sinopia users container.
     * Get the RDF (default serialization is JSON-LD) for the Sinopia users&#39; container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LDPContainer}
     */
    this.getUsers = function() {
      return this.getUsersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get headers only for base container GET request.
     * Gets the header values that would normally be found in the header of GET request on the base container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.headBaseWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get headers only for base container GET request.
     * Gets the header values that would normally be found in the header of GET request on the base container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.headBase = function() {
      return this.headBaseWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get headers only for a group GET request.
     * Gets the header values that would normally be found in the header of GET request on the given group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.headGroupWithHttpInfo = function(groupID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling headGroup");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get headers only for a group GET request.
     * Gets the header values that would normally be found in the header of GET request on the given group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.headGroup = function(groupID) {
      return this.headGroupWithHttpInfo(groupID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get headers only for a resource GET request.
     * Gets the header values that would normally be found in the header of GET request on the given resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.headResourceWithHttpInfo = function(groupID, resourceID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling headResource");
      }

      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling headResource");
      }


      var pathParams = {
        'groupID': groupID,
        'resourceID': resourceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}/{resourceID}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get headers only for a resource GET request.
     * Gets the header values that would normally be found in the header of GET request on the given resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.headResource = function(groupID, resourceID) {
      return this.headResourceWithHttpInfo(groupID, resourceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get headers only for a user GET request.
     * Gets the header values that would normally be found in the header of GET request on the given user.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.headUserWithHttpInfo = function(userID) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling headUser");
      }


      var pathParams = {
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users/{userID}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get headers only for a user GET request.
     * Gets the header values that would normally be found in the header of GET request on the given user.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.headUser = function(userID) {
      return this.headUserWithHttpInfo(userID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get headers only for a Sinopia users&#39; container GET request.
     * Gets the header values that would normally be found in the header of GET request on the Sinopia users&#39; container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.headUsersWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get headers only for a Sinopia users&#39; container GET request.
     * Gets the header values that would normally be found in the header of GET request on the Sinopia users&#39; container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.headUsers = function() {
      return this.headUsersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * HTTP Options for base container.
     * Gets the available options for HTTP methods to utilize on the base container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.optionsBaseWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * HTTP Options for base container.
     * Gets the available options for HTTP methods to utilize on the base container.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.optionsBase = function() {
      return this.optionsBaseWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * HTTP Options for group.
     * Gets the available options for HTTP methods to utilize on the given group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.optionsGroupWithHttpInfo = function(groupID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling optionsGroup");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * HTTP Options for group.
     * Gets the available options for HTTP methods to utilize on the given group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.optionsGroup = function(groupID) {
      return this.optionsGroupWithHttpInfo(groupID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * HTTP Options for resource.
     * Gets the available options for HTTP methods to utilize on the given resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.optionsResourceWithHttpInfo = function(groupID, resourceID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling optionsResource");
      }

      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling optionsResource");
      }


      var pathParams = {
        'groupID': groupID,
        'resourceID': resourceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}/{resourceID}', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * HTTP Options for resource.
     * Gets the available options for HTTP methods to utilize on the given resource.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.optionsResource = function(groupID, resourceID) {
      return this.optionsResourceWithHttpInfo(groupID, resourceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * HTTP Options for user.
     * Gets the available options for HTTP methods to utilize on the given user.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.optionsUserWithHttpInfo = function(userID) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling optionsUser");
      }


      var pathParams = {
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users/{userID}', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * HTTP Options for user.
     * Gets the available options for HTTP methods to utilize on the given user.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.optionsUser = function(userID) {
      return this.optionsUserWithHttpInfo(userID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * HTTP Options for Sinopia users&#39; container.
     * Gets the available options for HTTP methods to utilize on the Sinopia users&#39; container
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.optionsUsersWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * HTTP Options for Sinopia users&#39; container.
     * Gets the available options for HTTP methods to utilize on the Sinopia users&#39; container
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.optionsUsers = function() {
      return this.optionsUsersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata on base container.
     * Update metadata of base container with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {module:model/SinopiaBasicContainer} base New base container metadata to assert on the container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.link specifies container type.  you probably shouldn&#39;t override this parameter for this operation. (default to &lt;http://www.w3.org/ns/ldp#BasicContainer&gt;; rel&#x3D;&quot;type&quot;)
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateBaseWithHttpInfo = function(base, opts) {
      opts = opts || {};
      var postBody = base;

      // verify the required parameter 'base' is set
      if (base === undefined || base === null) {
        throw new Error("Missing the required parameter 'base' when calling updateBase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Link': opts['link'] ? opts['link'] : '<http://www.w3.org/ns/ldp#BasicContainer>; rel="type"', //MODIFIED AUTOGEN: codegen JS disregarded default param value
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update metadata on base container.
     * Update metadata of base container with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {module:model/SinopiaBasicContainer} base New base container metadata to assert on the container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.link specifies container type.  you probably shouldn&#39;t override this parameter for this operation. (default to &lt;http://www.w3.org/ns/ldp#BasicContainer&gt;; rel&#x3D;&quot;type&quot;)
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateBase = function(base, opts) {
      return this.updateBaseWithHttpInfo(base, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata on a group.
     * Update metadata of a given group container with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia. LDP Container to create the new resource within.
     * @param {module:model/LDPContainer} group Group metadata to replace existing description of the given group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateGroupWithHttpInfo = function(groupID, group, opts) {
      opts = opts || {};
      var postBody = group;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling updateGroup");
      }

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling updateGroup");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update metadata on a group.
     * Update metadata of a given group container with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia. LDP Container to create the new resource within.
     * @param {module:model/LDPContainer} group Group metadata to replace existing description of the given group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateGroup = function(groupID, group, opts) {
      return this.updateGroupWithHttpInfo(groupID, group, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata on a resource.
     * Update metadata of a given resource with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @param {module:model/Resource} resource Resource metadata to replace existing description of the given group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateResourceWithHttpInfo = function(groupID, resourceID, resource, opts) {
      opts = opts || {};
      var postBody = resource;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling updateResource");
      }

      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling updateResource");
      }

      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling updateResource");
      }


      var pathParams = {
        'groupID': groupID,
        'resourceID': resourceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/{groupID}/{resourceID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update metadata on a resource.
     * Update metadata of a given resource with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia.
     * @param {String} resourceID The UUID for the resource defined and managed within Sinopia.
     * @param {module:model/Resource} resource Resource metadata to replace existing description of the given group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateResource = function(groupID, resourceID, resource, opts) {
      return this.updateResourceWithHttpInfo(groupID, resourceID, resource, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata on a user.
     * Update metadata of a given Sinopua user with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @param {module:model/Resource} user User resource metadata to replace existing description of the given user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserWithHttpInfo = function(userID, user, opts) {
      opts = opts || {};
      var postBody = user;

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling updateUser");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUser");
      }


      var pathParams = {
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users/{userID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update metadata on a user.
     * Update metadata of a given Sinopua user with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {String} userID The ID for the User defined and managed within Sinopia.
     * @param {module:model/Resource} user User resource metadata to replace existing description of the given user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Group metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUser = function(userID, user, opts) {
      return this.updateUserWithHttpInfo(userID, user, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata on the Sinopia users&#39; container.
     * Update metadata of the Sinopia users&#39; container with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {module:model/LDPContainer} users Sinopia users&#39; container metadata to replace existing description of the Sinopia users&#39; container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Sinopia users&#39; container metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUsersWithHttpInfo = function(users, opts) {
      opts = opts || {};
      var postBody = users;

      // verify the required parameter 'users' is set
      if (users === undefined || users === null) {
        throw new Error("Missing the required parameter 'users' when calling updateUsers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': opts['contentType']
      };
      var formParams = {
      };

      var authNames = ['CognitoUser'];
      var contentTypes = ['application/ld+json'];
      var accepts = ['application/ld+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repository/users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update metadata on the Sinopia users&#39; container.
     * Update metadata of the Sinopia users&#39; container with new metadata defined via JSON-LD in payload. Performs overwrite, not partial update.
     * @param {module:model/LDPContainer} users Sinopia users&#39; container metadata to replace existing description of the Sinopia users&#39; container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType Content-Type of Sinopia users&#39; container metadata, with preference for JSON-LD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUsers = function(users, opts) {
      return this.updateUsersWithHttpInfo(users, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
