/**
 * Sinopia Server
 * Sinopia Server. Supports CRUD, following loosely LDP, on Sinopia resources. Top level requires special authorization for creating a group's graph (i.e. PCC, Stanford, etc.).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/HealthCheckResponse', 'model/LDPContainer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/HealthCheckResponse'), require('../model/LDPContainer'));
  } else {
    // Browser globals (root is window)
    if (!root.SinopiaServer) {
      root.SinopiaServer = {};
    }
    root.SinopiaServer.DefaultApi = factory(root.SinopiaServer.ApiClient, root.SinopiaServer.ErrorResponse, root.SinopiaServer.HealthCheckResponse, root.SinopiaServer.LDPContainer);
  }
}(this, function(ApiClient, ErrorResponse, HealthCheckResponse, LDPContainer) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Query for RDF about a Group.
     * Get the RDF (default, JSON-LD) for a Group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia. LDP Container to get.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LDPContainer} and HTTP response
     */
    this.getGroupWithHttpInfo = function(groupID) {
      var postBody = null;

      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling getGroup");
      }


      var pathParams = {
        'groupID': groupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['RemoteUser'];
      var contentTypes = ['application/json+ld'];
      var accepts = ['application/json+ld'];
      var returnType = LDPContainer;

      return this.apiClient.callApi(
        '/repository/{groupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query for RDF about a Group.
     * Get the RDF (default, JSON-LD) for a Group.
     * @param {String} groupID The group who is defining it&#39;s own resources or graph within Sinopia. LDP Container to get.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LDPContainer}
     */
    this.getGroup = function(groupID) {
      return this.getGroupWithHttpInfo(groupID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Health Check
     * The healthcheck endpoint provides information about the health of the service.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthCheckResponse} and HTTP response
     */
    this.healthCheckWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json+ld'];
      var accepts = ['application/json+ld'];
      var returnType = HealthCheckResponse;

      return this.apiClient.callApi(
        '/healthcheck', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Health Check
     * The healthcheck endpoint provides information about the health of the service.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthCheckResponse}
     */
    this.healthCheck = function() {
      return this.healthCheckWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
