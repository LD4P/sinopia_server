defaults: &defaults
  machine: true
  working_directory: ~/sinopia_server

version: 2
jobs:
  dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: node_modules-{{ checksum "sinopia_client/package.json" }}
      - run: cd sinopia_client && npm install
      - save_cache:
          key: node_modules-{{ checksum "sinopia_client/package.json" }}
          paths:
            - sinopia_client/node_modules
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: node_modules-{{ checksum "sinopia_client/package.json" }}
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: bring up trellis-ext-db, wait for it to start, run sinopia client integration tests
          command: |
            docker-compose up -d platform
            cd sinopia_client
            dockerize -wait http://localhost:8081/healthcheck -timeout 1m
            npm run test
  register_image:
    working_directory: ~/sinopia_server
    docker:
      - image: circleci/node:10.15.3
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Build & push docker image
          # NOTE: the env variables holding docker credentials are stored in the CircleCI dashboard
          command: |
            git diff --name-only origin/HEAD | grep -E '(Dockerfile|trellis)' || exit 0
            docker build -f Dockerfile.trellis-ext-db -t ld4p/trellis-ext-db:latest .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ld4p/trellis-ext-db:latest
  update_ecs:
      working_directory: ~/sinopia_server
      docker: # NOT the default
        - image: circleci/python:3.7-stretch-node-browsers
      steps:
        - run: sudo pip install awscli
        - run:
            name: Update AWS ECS
            command: |
              mkdir ~/.aws
              echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
              unset AWS_SESSION_TOKEN
              aws configure set region us-west-2
              aws configure set output json
              temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $DEV_ROLE_ARN --profile circle | jq .Credentials)
              export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
              export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
              export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
              aws configure list # Show confirmation of config
              task_arn=$(aws ecs list-task-definitions --family-prefix trellis --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
              cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-dev"))')
              # echo -n "task_arn=$task_arn\ncluster_arn=$cluster_arn\n"
              aws ecs update-service --service trellis --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment

workflows:
  version: 2
  build:
    jobs:
      - dependencies
      - test:
          requires:
            - dependencies
      - register_image:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - update_ecs:
          requires:
            - register_image
